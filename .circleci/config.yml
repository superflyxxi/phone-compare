version: 2.1

orbs:
  node: circleci/node@5
  docker: circleci/docker@2
  sonarcloud: sonarsource/sonarcloud@1

commands:
  export-primary-docker-tag:
    # Assuming /tmp/workspace as the files required
    steps:
      - run:
          name: Determine docker tag
          command: |
            echo "export PRIMARY_DOCKER_TAG=$(cat /tmp/workspace/short_version.txt | sed 's#/#-#g')" >> ${BASH_ENV}
  install-ssh-dependencies:
    steps:
      - run:
          name: Install sshpass
          command: |
            sudo apt-get update
            sudo apt-get install sshpass
  upload-file:
    parameters:
      file:
        description: the file to upload
        type: string
      remote_dir:
        description: The remote directory to append
        type: string
        default: "."
    steps:
      - run:
          name: Upload << parameters.file >>
          command: |
            sshpass -e scp -P ${SSH_PORT} << parameters.file >> ${SSH_USER}@${SSH_SERVER}:${SSH_DOCKER_COMPOSE_REMOTE_DIR}/<< parameters.remote_dir >>/${CIRCLE_PROJECT_REPONAME}
  execute-remote:
    parameters:
      command:
        description: The command to execute
        type: string
    steps:
      - run:
          name: Execute a remote command
          command: |
            sshpass -e ssh ${SSH_USER}@${SSH_SERVER} -p ${SSH_PORT} "${SSH_DOCKER_COMPOSE_REMOTE_DIR}/<< parameters.command >>"
  generate-file:
    parameters:
      template_file:
        description: The template file to use
        type: string
      output_file:
        description: The final filename to use
        type: string
      docker_registry:
        description: Replacement DOCKER_REGISTRY
        type: string
      docker_username:
        description: Replacement DOCKER_USERNAME
        type: string
      docker_tag:
        description: Replacement DOCKER_TAG
        type: string
      env:
        description: Replacement ENV
        type: string
    steps:
      - run:
          name: Generate << parameters.output_file >>
          command: |
            cat << parameters.template_file >> |\
              sed "s#\${DOCKER_REGISTRY}#<< parameters.docker_registry >>#g" |\
              sed "s#\${DOCKER_USERNAME}#<< parameters.docker_username >>#g" |\
              sed "s#\${DOCKER_TAG}#<< parameters.docker_tag >>#g" |\
              sed "s#\${ENV}#<< parameters.env >>#g" \
              > << parameters.output_file >>
            cat << parameters.output_file >>

jobs:
  unit-test:
    resource_class: small
    executor: 
      name: node/default
      tag: '16.5.0'
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Unit Tests
          command: npm test -- --forbid-pending --forbid-only --reporter mocha-junit-reporter
          environment:
            MOCHA_FILE: ./mocha/test-results.xml
      - run:
          name: Tar coverage
          command: tar -jvcf coverage.tar.bz2 coverage/
      - store_test_results:
          path: ./mocha
      - store_artifacts:
          path: ./mocha/test-results.xml
      - store_artifacts:
          path: ./coverage.tar.bz2
      - run:
          name: Verify XO
          command: npm run xo
      - sonarcloud/scan

  build-docker:
    executor: 
      name: docker/machine
      dlc: true
    resource_class: medium
    steps:
      - run:
          name: Define cache env variables
          command: |
            echo "CACHE_REGISTRY=${GHCR_REGISTRY}" >> ${BASH_ENV}
            echo "CACHE_USERNAME=${GHCR_USERNAME}" >> ${BASH_ENV}
            echo "CACHE_PASSWORD=${GHCR_TOKEN}" >> ${BASH_ENV}
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run: 
          name: Determine version.txt
          command: |
            cp -v /tmp/workspace/full_version.txt ./src/version.txt
      - export-primary-docker-tag
      - run:
          name: Custom enviroment variables
          command: |
            export CACHE_FROM_IMAGES=$(grep "^FROM " Dockerfile | sed 's/FROM //g')
            if ! [[ "<< pipeline.git.branch >>" =~ (main|release-.*|dev) ]]; then
              export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${CACHE_REGISTRY}/${CACHE_USERNAME}/${CIRCLE_PROJECT_REPONAME}:dev"
            fi

            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
              for A in $(echo ${PRIMARY_DOCKER_TAG} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${CACHE_REGISTRY}/${CACHE_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${NOW:1}"
                PREV=$NOW
              done
            fi
            echo "export CACHE_FROM_IMAGES=${CACHE_FROM_IMAGES}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: ${CACHE_REGISTRY}
          docker-username: CACHE_USERNAME
          docker-password: CACHE_PASSWORD
      - docker/build:
          step-name: Build application docker image
          image: ${CIRCLE_PROJECT_REPONAME}
          tag: build
          cache_from: ${CACHE_FROM_IMAGES}
      - run:
          name: Save docker image
          command: docker save -o images.tar ${CIRCLE_PROJECT_REPONAME}:build
      - persist_to_workspace:
          root: ./
          paths:
            - images.tar*

  publish-docker:
    resource_class: medium
    executor:
      name: docker/machine
      dlc: true
    parameters:
      registry-env:
        description: The registry envirnment variable to use to publish docker images.
        type: string
        default: docker.io
      docker-username-env:
        description: The docker registry username env variable to use.
        type: string
        default: DOCKER_LOGIN
      docker-password-env:
        description: The docker registery password env variable to use.
        type: string
        default: DOCKER_PASSWORD
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - export-primary-docker-tag
      - run:
          name: Custom enviroment variables
          command: |
            export DOCKER_TAGS=${PRIMARY_DOCKER_TAG}
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
              for A in $(echo ${PRIMARY_DOCKER_TAG} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export DOCKER_TAGS="${DOCKER_TAGS},${NOW:1}"
                PREV=$NOW
              done
              export DOCKER_TAGS="${DOCKER_TAGS},main,latest"
            fi
            echo "export DOCKER_TAGS=${DOCKER_TAGS}" >> ${BASH_ENV}
            echo "export FINAL_IMAGE_NAME=${<< parameters.docker-username-env >>}/${CIRCLE_PROJECT_REPONAME}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: ${<< parameters.registry-env >>}
          docker-password: << parameters.docker-password-env >>
          docker-username: << parameters.docker-username-env >>
      - run:
          name: Load docker images
          command: |
            docker load -i /tmp/workspace/images.tar
      - run:
          name: Tag docker images for repos
          command: |
            IFS="," read -ra LOOP_TAGS \<<< "${DOCKER_TAGS}"
            set -x
            for TAG in "${LOOP_TAGS[@]}"; do
              docker tag ${CIRCLE_PROJECT_REPONAME}:build ${<< parameters.registry-env >>}/${FINAL_IMAGE_NAME}:${TAG}
            done
            set +x
      - docker/push:
          step-name: Pushing image to desired repo
          registry: ${<< parameters.registry-env >>}
          image: ${FINAL_IMAGE_NAME}
          tag: ${DOCKER_TAGS}

  release-notes:
    resource_class: small
    docker:
      - image: circleci/node
    parameters:
      prerelease:
        description: Whether it's a pre-release and not actually release.
        type: boolean
        default: false
    steps:
      - checkout
      - run: npm ci --include=dev
      - attach_workspace:
          at: /tmp/workspace
      - when:
          condition: << parameters.prerelease >>
          steps:
            run:
              name: Define additional args
              command: |
                echo "export ADDITIONAL_ARGS=--dry-run" >> ${BASH_ENV}
      - run:
          name: Run semantic-release
          command: |
            npx semantic-release ${ADDITIONAL_ARGS}
            if [[ "" == "$(cat version.txt)" ]]; then 
              printf "%s-%s" ${CIRCLE_BRANCH} ${CIRCLE_SHA1:0:7} | sed 's#/#-#g' > /tmp/workspace/full_version.txt
              printf "${CIRCLE_BRANCH}" | sed 's#/#-#g' > /tmp/workspace/short_version.txt
            else
              cp -v version.txt /tmp/workspace/full_version.txt
              cp -v version.txt /tmp/workspace/short_version.txt
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - full_version.txt
            - short_version.txt

  deploy-k8s:
    parameters:
      env:
        description: Which environment to deploy
        type: enum
        default: "wip"
        enum: ["wip", "prod"]
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - export-primary-docker-tag
      - checkout
      - when:
          condition:
            equal:
              - prod
              - << parameters.env >>
          steps:
            - run: |
                echo "export DOCKER_REGISTRY=${DOCKER_IO_REGISTRY}" >> ${BASH_ENV}
                echo "export DOCKER_USERNAME=${DOCKER_IO_USERNAME}" >> ${BASH_ENV}
      - unless:
          condition:
            equal:
              - prod
              - << parameters.env >>
          steps:
            - run: |
                echo "export DOCKER_REGISTRY=${PRIVATE_DOCKER_REGISTRY}" >> ${BASH_ENV}
                echo "export DOCKER_USERNAME=${PRIVATE_DOCKER_USERNAME}" >> ${BASH_ENV}
      - generate-file:
          template_file: deployments/k8s-template.yml
          output_file: generated.yml
          docker_registry: ${DOCKER_REGISTRY}
          docker_username: ${DOCKER_USERNAME}
          docker_tag: ${PRIMARY_DOCKER_TAG}
          env: << parameters.env >>
      - install-ssh-dependencies
      - upload-file:
          file: generated.yml
          remote_dir: k8s/ci/<< parameters.env >>
      - execute-remote:
          command: ci-deploy-k8s.sh << parameters.env >> ${CIRCLE_PROJECT_REPONAME}

  deploy-docker-compose:
    parameters:
      env:
        description: Which environment to deploy
        type: enum
        default: "wip"
        enum: ["wip", "prod"]
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - export-primary-docker-tag
      - checkout
      - when:
          condition:
            equal:
              - prod
              - << parameters.env >>
          steps:
            - run: |
                echo "export DOCKER_REGISTRY=${DOCKER_IO_REGISTRY}" >> ${BASH_ENV}
                echo "export DOCKER_USERNAME=${DOCKER_IO_USERNAME}" >> ${BASH_ENV}
      - unless:
          condition:
            equal:
              - prod
              - << parameters.env >>
          steps:
            - run: |
                echo "export DOCKER_REGISTRY=${PRIVATE_DOCKER_REGISTRY}" >> ${BASH_ENV}
                echo "export DOCKER_USERNAME=${PRIVATE_DOCKER_USERNAME}" >> ${BASH_ENV}
      - generate-file:
          template_file: deployments/docker-compose-template.yml
          output_file: docker-compose.<< parameters.env >>.yml
          docker_registry: ${DOCKER_REGISTRY}
          docker_username: ${DOCKER_USERNAME}
          docker_tag: ${PRIMARY_DOCKER_TAG}
          env: << parameters.env >>
      - install-ssh-dependencies
      - upload-file:
          file: docker-compose.<< parameters.env >>.yml
      - execute-remote:
          command: ci-deploy-docker-compose.sh ${CIRCLE_PROJECT_REPONAME}-<< parameters.env >>

  integration-test:
    executor: 
      name: docker/machine
      dlc: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - export-primary-docker-tag
      - run:
          name: Load docker image
          command: docker load -i /tmp/workspace/images.tar
      - checkout
      - docker/build:
          step-name: Build integration testing docker image
          image: ${CIRCLE_PROJECT_REPONAME}
          tag: inttest
          dockerfile: int-test/Dockerfile
          extra_build_args: --build-arg FROM_IMAGE=${CIRCLE_PROJECT_REPONAME}:build
      - docker/check:
          registry: ${PRIVATE_DOCKER_REGISTRY}
          docker-username: PRIVATE_DOCKER_USERNAME
          docker-password: PRIVATE_DOCKER_PASSWORD
      - run:
          name: Tag image for publishing
          command: |
            docker tag ${CIRCLE_PROJECT_REPONAME}:inttest ${PRIVATE_DOCKER_REGISTRY}/${PRIVATE_DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}:inttest-${PRIMARY_DOCKER_TAG}
      - docker/push:
          step-name: Push integration testing docker image
          image: "${PRIVATE_DOCKER_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
          registry: ${PRIVATE_DOCKER_REGISTRY}
          tag: inttest-${PRIMARY_DOCKER_TAG}
      - run:
          name: Bring up
          command: |
            docker-compose -f int-test/docker-compose.yml up --abort-on-container-exit --exit-code-from ${CIRCLE_PROJECT_REPONAME}-ci-test

workflows:
  default:
    jobs:
      - release-notes:
          name: pre-release
          context: default
          prerelease: true
      - unit-test:
          context: default
      - build-docker:
          context: default
          requires:
            - unit-test
            - pre-release
      - publish-docker:
          name: publish-docker-private
          context: default
          registry-env: PRIVATE_DOCKER_REGISTRY
          docker-username-env: PRIVATE_DOCKER_USERNAME
          docker-password-env: PRIVATE_DOCKER_PASSWORD
          requires:
            - build-docker
      - publish-docker:
          name: publish-docker-ghcr
          context: default
          registry-env: GHCR_REGISTRY
          docker-username-env: GHCR_USERNAME
          docker-password-env: GHCR_TOKEN
          requires:
            - build-docker
            - integration-test
          filters:
            branches:
              only:
                - main
                - dev
      - publish-docker:
          name: publish-docker-dockerio
          context: default
          registry-env: DOCKER_IO_REGISTRY
          docker-username-env: DOCKER_IO_USERNAME
          docker-password-env: DOCKER_IO_PASSWORD
          requires:
            - build-docker
            - integration-test
          filters:
            branches:
              only:
                - main
      - release-notes:
          prerelease: false
          context: default
          requires:
            - publish-docker-private
            - publish-docker-ghcr
            - publish-docker-dockerio
            - integration-test
      - deploy-k8s:
          context: default
          name: deploy-k8s-wip
          env: wip
          requires:
            - publish-docker-private
            - pre-release
      - deploy-k8s:
          context: default
          name: deploy-k8s-prod
          env: prod
          requires:
            - publish-docker-dockerio
            - pre-release
          filters:
            branches:
              only:
                - main
      - deploy-docker-compose:
          context: default
          name: deploy-docker-compose-wip
          env: wip
          requires:
            - publish-docker-private
      - deploy-docker-compose:
          context: default
          name: deploy-docker-compose-prod
          env: prod
          requires:
            - publish-docker-private
          filters:
            branches:
              only:
                - main
      - integration-test:
          context: default
          requires:
            - build-docker
          filters:
            branches:
              ignore:
                - main
