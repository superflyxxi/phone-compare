version: 2.1

orbs:
  node: circleci/node@4
  docker: circleci/docker@1

parameters:
  nodeVersion:
    description: The version of node to build.
    type: string
    default: '14.16'

jobs:
  test:
    executor: 
      name: node/default
      tag: << pipeline.parameters.nodeVersion >>
    steps:
      - checkout
      - node/install-packages
      - run:
          command: npm test
          environment:
            MOCHA_FILE: ./mocha/test-results.xml
            MOCHA_REPORTER_ARGS: --reporter mocha-junit-reporter
      - store_test_results:
          path: ./mocha
      - store_artifacts:
          path: ./mocha/test-results.xml
      - store_artifacts:
          path: ./coverage/
      - run:
          name: Verify XO
          command: npm run xo-verify
      - run:
          name: Ensure only not used
          command: |
            if grep ".only" -Rq test/; then
              echo "Tests include only; failng"
              exit 1
            fi
  docker:
    machine: 
      image: ubuntu-2004:202101-01
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Determine docker tag
          command: echo "DOCKER_TAG=$(cat /tmp/workspace/version.txt)" >> ${BASH_ENV}
      - docker/check:
          registry: ${DOCKER_REGISTRY}
      - checkout
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Determine alternate tag
                command: |
                  if [[ "${DOCKER_TAG}" != "main" ]]; then
                    echo "ALTERNATE_TAG=latest" >> ${BASH_ENV}
                  fi
      - unless:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Set cache from args
                command: |
                  echo "export CACHE_FROM_ARGS=--cache-from ${DOCKER_REGISTRY}/${CIRCLE_PROJECT_REPONAME}:latest" >> ${BASH_ENV}
      - docker/build:
          image: ${CIRCLE_PROJECT_REPONAME}
          registry: ${DOCKER_REGISTRY}
          tag: ${DOCKER_TAG},${CIRCLE_BRANCH},${ALTERNATE_TAG}
          extra_build_args: ${CACHE_FROM_ARGS} --build-arg NODE_VERSION=<< pipeline.parameters.nodeVersion >>
      - docker/push:
          image: ${CIRCLE_PROJECT_REPONAME}
          registry: ${DOCKER_REGISTRY}
          tag: ${DOCKER_TAG},${CIRCLE_BRANCH},${ALTERNATE_TAG}
  release:
    docker:
      - image: circleci/node
    parameters:
      prerelease:
        description: Whether it's a pre-release and not actually release.
        type: boolean
        default: false
    steps:
      - checkout
      - run: npm ci
      - run: npm install -D @semantic-release/exec
      - attach_workspace:
          at: /tmp/workspace
      - when:
          condition: << parameters.prerelease >>
          steps:
            run:
              name: Define additional args
              command: |
                echo "ADDITIONAL_ARGS=--dry-run" >> ${BASH_ENV}
      - run:
          name: Run semantic-release
          command: |
            npx semantic-release ${ADDITIONAL_ARGS}
            if [[ "" == "$(cat version.txt)" ]]; then 
              echo "${CIRCLE_BRANCH}" > /tmp/workspace/version.txt
            else
              cp -v version.txt /tmp/workspace
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - version.txt

workflows:
  default:
    jobs:
      - release:
          name: pre-release
          prerelease: true
      - test
      - docker:
          requires:
            - test
            - pre-release
      - release:
          prerelease: false
          requires:
            - docker
          filters:
            branches:
              only:
                - main
